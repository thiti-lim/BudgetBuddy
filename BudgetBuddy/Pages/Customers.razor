@page "/customers"
@using BudgetBuddy.Data.DomainModels
@using BudgetBuddy.Repositories.Interfaces
@inject ICustomerRepository repo


<MudContainer Class="py-8 px-12">
    <MudText Typo="Typo.h6" Class="mb-4">Customers</MudText>
        <EditForm Class="d-block" Model="@NewCustomer" OnValidSubmit="InsertCustomer">
            <DataAnnotationsValidator />
            <MudGrid Class="mb-2" Justify="Justify.FlexStart">
                <MudItem class="d-flex flex-column justify-center">
                    <MudText>Add Customer</MudText>
                </MudItem>
                <MudItem>
                    <MudTextField Variant="Variant.Filled" Margin="Margin.Dense" Label="Customer name" @bind-Value="NewCustomer.CustomerName" For="@(() => NewCustomer.CustomerName)" />
                </MudItem>
                <MudItem Class="d-flex flex-column justify-center">
                    <MudButton ButtonType="ButtonType.Submit" Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary">Add</MudButton>
                </MudItem>
            </MudGrid>
        </EditForm>
        @if(CustomersList is not null && CustomersList.Count() > 0) {
            <MudTable Items="@CustomersList">
                <HeaderContent>
                    <MudTh>User Id</MudTh>
                    <MudTh>Customer Id</MudTh>
                    <MudTh>Customer Name</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="User Id">@context.UserId</MudTd>
                    <MudTd DataLabel="Customer Id">@context.Id</MudTd>
                    <MudTd DataLabel="Customer Name">@context.CustomerName</MudTd>
                    <MudTd DataLabel="Actions" Style="width: 50px">
                        <MudIconButton OnClick="@(e => DeleteCustomer(@context))" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Size="Size.Small"></MudIconButton>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
</MudContainer>
<MudOverlay @bind-Visible="IsLoading" DarkBackground="true">
    <MudProgressCircular Color="Color.Secondary" Indeterminate="true" Size="Size.Large" />
</MudOverlay>
@code {
    private IEnumerable<Customer>? CustomersList { get; set; }
    private Customer NewCustomer = new Customer();
    private bool IsLoading { get; set; }
    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            CustomersList = await repo.GetCustomers();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task InsertCustomer()
    {
        IsLoading = true;
        try
        {
            await repo.InsertCustomer(NewCustomer);
            CustomersList = await repo.GetCustomers();
            NewCustomer = new Customer();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task DeleteCustomer(Customer customer)
    {

        IsLoading = true;
        try
        {
            await repo.DeleteCustomer(customer);
            CustomersList = await repo.GetCustomers();
        }
        finally
        {
            IsLoading = false;
        }
    }

}
